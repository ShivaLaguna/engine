/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type VRFUserRandomnessFullfilled = ContractEventLog<{
  requestID: string;
  randomness: string;
  0: string;
  1: string;
}>;

export interface MockVRFUser extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): MockVRFUser;
  clone(): MockVRFUser;
  methods: {
    randomnessFullfilled(
      arg0: string | number[]
    ): NonPayableTransactionObject<boolean>;

    randomnessValue(
      arg0: string | number[]
    ): NonPayableTransactionObject<string>;

    rawFulfillRandomness(
      requestId: string | number[],
      randomness: number | string | BN
    ): NonPayableTransactionObject<void>;

    request(): NonPayableTransactionObject<void>;
  };
  events: {
    VRFUserRandomnessFullfilled(
      cb?: Callback<VRFUserRandomnessFullfilled>
    ): EventEmitter;
    VRFUserRandomnessFullfilled(
      options?: EventOptions,
      cb?: Callback<VRFUserRandomnessFullfilled>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "VRFUserRandomnessFullfilled",
    cb: Callback<VRFUserRandomnessFullfilled>
  ): void;
  once(
    event: "VRFUserRandomnessFullfilled",
    options: EventOptions,
    cb: Callback<VRFUserRandomnessFullfilled>
  ): void;
}
