/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type LootboxOpeningBegan = ContractEventLog<{
  lootboxOwner: string;
  lootboxId: string;
  0: string;
  1: string;
}>;
export type LootboxOpeningCompleted = ContractEventLog<{
  lootboxOwner: string;
  lootboxId: string;
  requestId: string;
  randomness: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface LootboxRandomness extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): LootboxRandomness;
  clone(): LootboxRandomness;
  methods: {
    ActiveLootboxOpenings(
      arg0: string | number[]
    ): NonPayableTransactionObject<{
      status: string;
      user: string;
      lootboxId: string;
      randomness: string;
      0: string;
      1: string;
      2: string;
      3: string;
    }>;

    CurrentOpeningforUser(arg0: string): NonPayableTransactionObject<string>;

    getChainlinkVRFFee(): NonPayableTransactionObject<string>;

    getChainlinkVRFKeyhash(): NonPayableTransactionObject<string>;

    rawFulfillRandomness(
      requestId: string | number[],
      randomness: number | string | BN
    ): NonPayableTransactionObject<void>;
  };
  events: {
    LootboxOpeningBegan(cb?: Callback<LootboxOpeningBegan>): EventEmitter;
    LootboxOpeningBegan(
      options?: EventOptions,
      cb?: Callback<LootboxOpeningBegan>
    ): EventEmitter;

    LootboxOpeningCompleted(
      cb?: Callback<LootboxOpeningCompleted>
    ): EventEmitter;
    LootboxOpeningCompleted(
      options?: EventOptions,
      cb?: Callback<LootboxOpeningCompleted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "LootboxOpeningBegan", cb: Callback<LootboxOpeningBegan>): void;
  once(
    event: "LootboxOpeningBegan",
    options: EventOptions,
    cb: Callback<LootboxOpeningBegan>
  ): void;

  once(
    event: "LootboxOpeningCompleted",
    cb: Callback<LootboxOpeningCompleted>
  ): void;
  once(
    event: "LootboxOpeningCompleted",
    options: EventOptions,
    cb: Callback<LootboxOpeningCompleted>
  ): void;
}
